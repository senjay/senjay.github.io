<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/05/23/hello-world/"/>
    <url>/2020/05/23/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="hljs bash">$ hexo new <span class="hljs-string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="hljs bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="hljs bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="hljs bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>通过可逆运算交换变量的值</title>
    <link href="/2020/05/23/%E9%80%9A%E8%BF%87%E5%8F%AF%E9%80%86%E8%BF%90%E7%AE%97%E4%BA%A4%E6%8D%A2%E5%8F%98%E9%87%8F%E7%9A%84%E5%80%BC/"/>
    <url>/2020/05/23/%E9%80%9A%E8%BF%87%E5%8F%AF%E9%80%86%E8%BF%90%E7%AE%97%E4%BA%A4%E6%8D%A2%E5%8F%98%E9%87%8F%E7%9A%84%E5%80%BC/</url>
    
    <content type="html"><![CDATA[<h1 id="通过可逆运算交换变量的值"><a href="#通过可逆运算交换变量的值" class="headerlink" title="通过可逆运算交换变量的值"></a>通过可逆运算交换变量的值</h1><h3 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1 介绍"></a>1 介绍</h3><p>​        交换两个变量的值除了引入临时变量，还有通过加减或异或等奇淫技巧来完成，现在来介绍其原理并且推广它们。</p><h2 id="2-交换的原理"><a href="#2-交换的原理" class="headerlink" title="2 交换的原理"></a>2 交换的原理</h2><p>​        加减、异或都是可逆运算，现在定义一种可逆运算规则$f$,它的逆运算是$f^{-1}$，不妨设$f(a,b)=c$,则有$f^{-1}(c,a)=b$，则有如下推导,注意我用<code>:=</code>来表示赋值：</p><script type="math/tex; mode=display">\begin{align}a& :=f(a,b)  \tag{1}\label{1}\\b& :=f^{-1}(a,b)=f^{-1}(f(a,b),b)=a \tag{2}\label{2}\\a& :=f^{-1}(a,b)=f^{-1}(f(a,b),a)=b \tag{3}\label{3}\end{align}</script><p>可以看到，最终$a,b$交换了两者的值，因此可见只要是逆运算就可以满足要求，比如使用乘除：</p><pre><code class="hljs c++">a=a*b;b=a/b;a=a/b;</code></pre><p>我们可以代入数字验证一下，可以发现它也是正确的。</p><h2 id="3-交换律的影响"><a href="#3-交换律的影响" class="headerlink" title="3 交换律的影响"></a>3 交换律的影响</h2><p>​        但是，如果你细心点，你会发现既然乘除可以，那为什么要先乘后除，或者干脆使用乘方与开方，因为它们也是一组逆运算，可是当我们这样操作会发现答案是与预期不符的。因为问题出在交换律上。</p><h3 id="3-1-f-与-f-1-只有一者满足交换律"><a href="#3-1-f-与-f-1-只有一者满足交换律" class="headerlink" title="3.1 $f$与$f^{-1}$只有一者满足交换律"></a>3.1 $f$与$f^{-1}$只有一者满足交换律</h3><p>​        如果$f(a,b)\not= f(b,a)$,我们也就能得出$f^{-1}(c,a)\not=f^{-1}(c,b)$,而公式$\eqref{2}\eqref{3}$正是依赖于此的。也可这样想，不妨设$f(a,b)=c_1,f(b,a)=c_2$，则正确的应该是$f^{-1}(c_1,a)=b,f^{-1}(c_2,b)=a$。所以运算规则$f$应满足交换律，其逆运算则无要求。</p><p>​        那么，如果$f$不满足交换律，可以实现交换变量而不引入临时变量吗？答案当然是可以的，不过这就对不同的$f$就有不同的方法了，因为我们要知道$c_1$与$c_2$的关系，如果$f$是减法，则$c_1=-c_2$;如果是除法，则$c_1=c_2^{-1}$。</p><h3 id="3-2-f-与-f-1-都不满足交换律"><a href="#3-2-f-与-f-1-都不满足交换律" class="headerlink" title="3.2 $f$与$f^{-1}$都不满足交换律"></a>3.2 $f$与$f^{-1}$都不满足交换律</h3><p>​        这个条件下很好的例子就是矩阵和幂两种。min矩阵涉及左乘、右乘、逆；幂涉及乘方、开方、对数。它们的运算时涉及到三种运算规则的。</p><p>​        以矩阵为例：</p><script type="math/tex; mode=display">\begin{align}A&:=AB\\B&:=AB^{-1}=ABB^{-1}=A\\A&:=B^{-1}A=A^{-1}AB=B\\\end{align}</script><p>​        幂运算：</p><p>​        </p><script type="math/tex; mode=display">\begin{align}a&:=a^b\\b&:=\sqrt[b]{a}=\sqrt[b]{a^b}=a\\a&:=\log_{a}{a}=\log_{a}{a^b}=b\end{align}</script><p>这种情况下是每种运算规则都是需要用到才能完成交换的。</p><h3 id="3-3-f-与-f-1-都满足交换律"><a href="#3-3-f-与-f-1-都满足交换律" class="headerlink" title="3.3  $f$与$f^{-1}$都满足交换律"></a>3.3  $f$与$f^{-1}$都满足交换律</h3><p>​        这个的最好的例子就是异或运算$\oplus $,因为它除了自身就满足交换，同时它的逆运算就是自身$f=f^{-1}$,</p><script type="math/tex; mode=display">\begin{align}a&:=a\oplus b\\b&:=a\oplus b=a\oplus b\oplus b =a\\a&:=a\oplus b=a\oplus b\oplus a =b\end{align}</script><h3 id="4-总结"><a href="#4-总结" class="headerlink" title="4 总结"></a>4 总结</h3><p>​        主要讲了讲这种变量交换操作的背后原理即推广，但是需要提醒的是在实际应用中，我还是建议通过临时变量来进行交换，上面的操作虽然给人眼前一亮，同时也有理论支持，可应用在实际中还是可能会出现错误，比如溢出，甚至交换变量类型根本就不是数字。我的建议是虽然这很有趣但请不要用。</p><p>​        </p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>12306余票及票价查询</title>
    <link href="/2018/10/09/%E4%BD%99%E7%A5%A8%E5%8F%8A%E7%A5%A8%E4%BB%B7%E6%9F%A5%E8%AF%A2/"/>
    <url>/2018/10/09/%E4%BD%99%E7%A5%A8%E5%8F%8A%E7%A5%A8%E4%BB%B7%E6%9F%A5%E8%AF%A2/</url>
    
    <content type="html"><![CDATA[<p>还原整个思路，遇到的一些问题也会写出来，纯新手向，因为打包在了一个类里，所以单独拷贝一个函数可能会有些问题,后面有完整代码地址，如有错误可以指正- -有问题也可以留言，后面写的有些赶，可以去完整源代码中看看<br>截至2018/10/9   0:15代码还是有效的</p><h2 id="环境："><a href="#环境：" class="headerlink" title="环境："></a>环境：</h2><p>python3.6<br><strong>涉及的库:</strong><br>requests<br>json<br>prettytable<br>re<br>pprint<br><strong>1.url分析</strong><br>    先打开<a href="https://kyfw.12306.cn/otn/leftTicket/init" target="_blank" rel="noopener">12306的余票查询</a>，我用的是火狐浏览器，按F12打开调试工具选择network（网络）选项，选择出发地，目的地，日期，点击查询<br>    <img src="https://img-blog.csdn.net/20181008211309564?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2NDkwMzY0/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" srcset="/img/loading.gif" alt="在这里插入图片描述"><br>（小白问题：调试窗口里啥也没有是因为 你一番操作猛如虎，结果完事后想起：哎？调试窗口没打开！）<br>右上角有一排选项，咱选js，xhr 然后从这一条条里找出我们需要的链接（点的时候在右边选择响应，可以看到这条请求返回啥）哇塞！你找到一串data，里面还有各种车票的信息，好了，就是你了：<br><a href="https://kyfw.12306.cn/otn/leftTicket/queryA?leftTicketDTO.train_date=2018-10-23&amp;leftTicketDTO.from_station=HZH&amp;leftTicketDTO.to_station=RZH&amp;purpose_codes=ADULT" target="_blank" rel="noopener">https://kyfw.12306.cn/otn/leftTicket/queryA?leftTicketDTO.train_date=2018-10-23&amp;leftTicketDTO.from_station=HZH&amp;leftTicketDTO.to_station=RZH&amp;purpose_codes=ADULT</a><br><img src="https://img-blog.csdn.net/20181008212636116?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2NDkwMzY0/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" srcset="/img/loading.gif" alt="在这里插入图片描述"><br><strong>PS</strong>：找json链接这种活就看经验了，老手可能马上就能找到，新手可能就要一条条点（汗~~）我这给一个快速的方法：进入余票查询界面，选择好出发地和目的地及日期，点击查询，好！然后再打开F12调试界面在点查询！哇塞只有1条而且就是我们需要的！（深入原因的话就是在你打开了调试界面后你只进行了这一条查询的post请求，而返回的当然就是你要的了）<br><img src="https://img-blog.csdn.net/20181008213803841?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2NDkwMzY0/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" srcset="/img/loading.gif" alt="在这里插入图片描述"><br>好,继续正题,我们来观察这条json的链接,很容易明白那些参数吧,如下:<br><a href="https://kyfw.12306.cn/otn/leftTicket/queryA?leftTicketDTO.train_date=2018-10-23&amp;leftTicketDTO.from_station=HZH&amp;leftTicketDTO.to_station=RZH&amp;purpose_codes=ADULT" target="_blank" rel="noopener">https://kyfw.12306.cn/otn/leftTicket/queryA?leftTicketDTO.train_date=2018-10-23&amp;leftTicketDTO.from_station=HZH&amp;leftTicketDTO.to_station=RZH&amp;purpose_codes=ADULT</a><br>leftTicketDTO.train_date=日期<br>leftTicketDTO.from_station=出发点的地点码<br>leftTicketDTO.to_station=目的地的地点码<br>purpose_codes=票的种类<br><strong>2.获取车站对照字典</strong><br>上文链接中有两个参数是地点码,即一个地名对应一个值,一开始我是直接下载了网上(baidu喽)的一个字典,然后最后写完.不对!我靠!而且调试半天定位到字典错了!(这么多的地名偏偏被窝测试到错误的也是没谁了…）<br><img src="https://img-blog.csdn.net/20181008220408892?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2NDkwMzY0/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" srcset="/img/loading.gif" alt="在这里插入图片描述"><br>好!自己动手!</p><pre><code class="hljs plain">import requestsimport re#生成字典 运行一次后抛弃之~~~def new_dictionary():    url&#x3D;&quot;https:&#x2F;&#x2F;kyfw.12306.cn&#x2F;otn&#x2F;resources&#x2F;js&#x2F;framework&#x2F;station_name.js?station_version&#x3D;1.9069&quot;    station_namesweb&#x3D;requests.get(url)    stationdic &#x3D; re.findall(r&#39;([\u4e00-\u9fa5]+)\|([a-zA-Z]+)&#39;, station_namesweb.text)    stationdic&#x3D;dict(stationdic)    print(stationdic)new_dictionary()</code></pre><p>requests请求,json打包,正则提取,over!<br>打印出一个字典复制然后在一个文件里就ok了(上面代码中的url其实也是一样找的,可以试试手去找找看)哈哈,其实这也是今天整个工程的浓缩版吧,思路也是差不多的<br><strong>3.输入出发点,目的地,时间,获得需要的查询链接</strong><br>废多看码!!!<br><pre><code class="hljs plain">def getUrl(self):    startflag &#x3D; False    endflag &#x3D; False    while startflag &#x3D;&#x3D; False:        start &#x3D; input(&quot;请输入始发地：\n&quot;)        startflag &#x3D; stations.__contains__(start)        if startflag &#x3D;&#x3D; False:            print(&#39;始发地输入错误！&#39;)    while endflag &#x3D;&#x3D; False:        end &#x3D; input(&quot;请输入目的地：\n&quot;)        endflag &#x3D; stations.__contains__(end)        if endflag &#x3D;&#x3D; False:            print(&#39;目的地输入错误！&#39;)    self.date &#x3D; input(&quot;请输入日期(格式为xxxx-xx-xx)：\n&quot;)    url &#x3D; &#39;https:&#x2F;&#x2F;kyfw.12306.cn&#x2F;otn&#x2F;leftTicket&#x2F;queryA?leftTicketDTO.train_date&#x3D;&#39; \          + self.date + &#39;&amp;leftTicketDTO.from_station&#x3D;&#39; \          + stations[start] + &#39;&amp;leftTicketDTO.to_station&#x3D;&#39; \          + stations[end] + &#39;&amp;purpose_codes&#x3D;ADULT&#39;    return url</code></pre><br><strong>4.获取车辆信息</strong><br>因为12306在这里没做啥验证所以可以直接请求,不妨直接在浏览器里看一下,emmm是不是头都大了!!!!<br><img src="https://img-blog.csdn.net/20181008233255654?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2NDkwMzY0/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" srcset="/img/loading.gif" alt="在这里插入图片描述"><br>车辆的信息都在这里了,用|分隔开,我们要做的就是从里面提取出我们想要的信息,emmm其实我花的时间最多的是在这里,因为要一一对应知道每个信息代表什么,而我又找不到那么一辆每个信息都齐全的车来让我对照…只能用好几辆的信息来对比喽（还不一定是对的，眼力有限）…我的眼睛!!!<br><img src="https://img-blog.csdn.net/20181008234420942?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2NDkwMzY0/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" srcset="/img/loading.gif" alt="在这里插入图片描述"></p><blockquote><p>乱码|预订|030000K5540E|K551|MDB|RZH|HZH|RZH|02:31|10:50|08:19|Y|乱码|20181021|3|B2|44|52|0|0||||无|||无||有|10|||||10401030|1413|0</p><p>上代码:<br><pre><code class="hljs plain">def getData(self,url):    dataweb &#x3D; requests.get(url)    datajson &#x3D; json.loads(dataweb.text)    datatrains &#x3D; datajson[&#39;data&#39;][&#39;result&#39;]    restations&#x3D;datajson[&#39;data&#39;][&#39;map&#39;]#地点缩写：地点全称的字典    dataans &#x3D; []    for train in datatrains:        per &#x3D; &#123;            &#39;train_no&#39;: &#39;&#39;,            &#39;from_station_no&#39;: &#39;&#39;,            &#39;to_station_no&#39;: &#39;&#39;,            &#39;seat_types&#39;: &#39;&#39;,            &#39;chufazhan&#39;:&#39;&#39;,            &#39;dadaozhan&#39;:&#39;&#39;,            &#39;checi&#39;: &#39;&#39;,            &#39;chufasj&#39;: &#39;&#39;,            &#39;didasj&#39;: &#39;&#39;,            &#39;lishi&#39;: &#39;&#39;,            &#39;erdeng&#39;: &#39;&#39;,            &#39;yideng&#39;: &#39;&#39;,            &#39;shangwu&#39;: &#39;&#39;,            &#39;wuzuo&#39;:&#39;&#39;        &#125;        train &#x3D; train.split(&#39;|&#39;)        per[&#39;train_no&#39;] &#x3D; train[2]        per[&#39;from_station_no&#39;] &#x3D; train[16]        per[&#39;to_station_no&#39;] &#x3D; train[17]        per[&#39;seat_types&#39;] &#x3D; train[35]        per[&#39;chufazhan&#39;]&#x3D;train[6]        per[&#39;dadaozhan&#39;]&#x3D;train[7]        #将得到站点名字由缩写转换全称        per[&#39;chufazhan&#39;]&#x3D;restations[per[&#39;chufazhan&#39;]]        per[&#39;dadaozhan&#39;]&#x3D;restations[per[&#39;dadaozhan&#39;]]        per[&#39;checi&#39;] &#x3D; train[3]        per[&#39;chufasj&#39;] &#x3D; train[8]        per[&#39;didasj&#39;] &#x3D; train[9]        per[&#39;lishi&#39;] &#x3D; train[10]        per[&#39;erdeng&#39;] &#x3D; train[30]        per[&#39;yideng&#39;] &#x3D; train[31]        per[&#39;shangwu&#39;] &#x3D; train[32]        per[&#39;wuzuo&#39;]&#x3D;train[26]        for value in per:            if (per[value] &#x3D;&#x3D; &#39;&#39;):                per[value] &#x3D; &#39;-&#39;        dataans.append(per)    return dataans</code></pre><br>PS：这里有个问题要说明下：比如我朋友温州-金华，而金华有两个站，他只要其中一个站的，所以我们得显示出出发站和抵达站到底是哪个，但是在信息中我们获得地点是一个码而不是一个站的名字，而我们的字典中是 {名字：码}，一开始我想要不干脆再做个反转的字典，后来往上翻的时候发现：原来上面已经给我们了！解决！计划通~<br><img src="https://img-blog.csdn.net/20181009004354618?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2NDkwMzY0/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" srcset="/img/loading.gif" alt="在这里插入图片描述"><br><strong>5.获取票价信息</strong><br>票价的url是另外一条了,获取方式同上上,老方法请求,解析,打包<br><pre><code class="hljs plain">def GetPrice(self,train_no,from_station_no,to_station_no,seat_types,date,price):    url &#x3D; &#39;https:&#x2F;&#x2F;kyfw.12306.cn&#x2F;otn&#x2F;leftTicket&#x2F;queryTicketPrice?train_no&#x3D;&#39; \          + train_no + &#39;&amp;from_station_no&#x3D;&#39; \          + from_station_no + &#39;&amp;to_station_no&#x3D;&#39; \          + to_station_no + &#39;&amp;seat_types&#x3D;&#39; \          + seat_types + &#39;&amp;train_date&#x3D;&#39; + date    priceweb&#x3D;requests.get(url)    pricejson&#x3D;json.loads(priceweb.text)    pricedata&#x3D;pricejson[&#39;data&#39;]    shangwu&#x3D;pricedata.__contains__(&#39;A9&#39;)#商务    yideng&#x3D;pricedata.__contains__(&#39;M&#39;)#一等    erdeng&#x3D;pricedata.__contains__(&#39;O&#39;)#二等    wuzuo&#x3D;pricedata.__contains__(&#39;WZ&#39;)#无座    if shangwu:        price[&#39;shangwu&#39;]&#x3D;pricedata[&#39;A9&#39;]    else :        price[&#39;shangwu&#39;]&#x3D;&#39;&#39;    if yideng:        price[&#39;yideng&#39;]&#x3D;pricedata[&#39;M&#39;]    else :        price[&#39;yideng&#39;]&#x3D;&#39;&#39;    if erdeng:        price[&#39;erdeng&#39;]&#x3D;pricedata[&#39;O&#39;]    else :        price[&#39;erdeng&#39;]&#x3D;&#39;&#39;    if wuzuo:        price[&#39;wuzuo&#39;]&#x3D;pricedata[&#39;WZ&#39;]    else :        price[&#39;wuzuo&#39;]&#x3D;&#39;&#39;    return price</code></pre><br><strong>6.输出</strong><br>用了prettytable库输出表格<br><pre><code class="hljs plain">def Print(self):    price&#x3D;&#123;        &#39;shangwu&#39;:&#39;&#39;,        &#39;yideng&#39;:&#39;&#39;,        &#39;erdeng&#39;:&#39;&#39;,        &#39;wuzuo&#39;:&#39;&#39;,    &#125;    table &#x3D; prettytable.PrettyTable()    table.field_names &#x3D; [&quot;车次&quot;,&quot;出发站&quot;,&quot;达到站&quot; ,&quot;出发时间&quot;, &quot;抵达时间&quot;, &quot;历时&quot;, &quot;二等座&quot;, &quot;一等座&quot;, &quot;商务座&quot;,&quot;无座&quot;]    for per in self.data:        price&#x3D;self.GetPrice(per[&#39;train_no&#39;],per[&#39;from_station_no&#39;],per[&#39;to_station_no&#39;],per[&#39;seat_types&#39;],self.date,price)        table.add_row([per[&#39;checi&#39;],per[&#39;chufazhan&#39;],per[&#39;dadaozhan&#39;], per[&#39;chufasj&#39;], per[&#39;didasj&#39;], per[&#39;lishi&#39;], per[&#39;erdeng&#39;]+&#39;\n&#39;+price[&#39;erdeng&#39;], per[&#39;yideng&#39;]+&#39;\n&#39;+price[&#39;yideng&#39;],                       per[&#39;shangwu&#39;]+&#39;\n&#39;+price[&#39;shangwu&#39;],per[&#39;wuzuo&#39;]+&#39;\n&#39;+price[&#39;wuzuo&#39;]])    print(table)</code></pre><br><strong>7.演示</strong><br><img src="https://img-blog.csdn.net/20181008235639135?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2NDkwMzY0/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" srcset="/img/loading.gif" alt="在这里插入图片描述"><br>8.完整代码<br><a href="https://github.com/senjay/12306tickets_and_price_search" target="_blank" rel="noopener">https://github.com/senjay/12306tickets_and_price_search</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>爬虫</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
